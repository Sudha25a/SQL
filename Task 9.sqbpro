<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="Task 9.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1225"/><column_width id="4" width="0"/><expanded_item id="0" parent="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="SQL_DATA" custom_title="0" dock_id="1" table="4,8:mainSQL_DATA"/><dock_state state="000000ff00000000fd0000000100000002000004f40000021efc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000004f40000015c00ffffff000004f40000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="SQL_DATA" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="94"/><column index="2" value="70"/><column index="3" value="70"/><column index="4" value="61"/><column index="5" value="54"/><column index="6" value="101"/><column index="7" value="171"/><column index="8" value="109"/><column index="9" value="51"/><column index="10" value="36"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- 9.1 Give the package name and how many times they're downloaded. Order by highest to lowest number of times downloaded.
SELECT package, COUNT(*) AS download_count
FROM SQL_DATA
GROUP BY package
ORDER BY download_count DESC;

-- 9.2 Give the package ranking (based on how many times it was downloaded) during 9AM to 11AM

SELECT package, RANK() OVER (ORDER BY COUNT(*) DESC) AS package_rank
FROM SQL_DATA
WHERE strftime('%H', time) BETWEEN '09' AND '11' 
GROUP BY package
ORDER BY package_rank;

-- 9.3 How many records (downloads) are from China (&quot;CN&quot;) or Japan(&quot;JP&quot;) or Singapore (&quot;SG&quot;)?
SELECT COUNT(*)
FROM SQL_DATA
WHERE country IN ('CN', 'JP', 'SG');

-- 9.4 Print the countries whose downloads are more than the downloads from China (&quot;CN&quot;)
SELECT country
FROM SQL_DATA
GROUP BY country
HAVING COUNT(*) &gt; (SELECT COUNT(*) FROM SQL_DATA WHERE country = 'CN');

--9.5 Print the length of each package name for packages which appear only once. 
-- In the same query, show the average length of all such packages.
--CTE method
WITH PackageCounts AS (
    SELECT package, COUNT(*) AS count
    FROM SQL_DATA
    GROUP BY package
    HAVING COUNT(*) = 1
)
SELECT LENGTH(package) AS package_length, AVG(LENGTH(package)) OVER () AS average_length
FROM PackageCounts;


-- 9.6 Get the package whose download count ranks 2nd (print package name and its download count).
--CTE
WITH PackageRank AS (
    SELECT package, COUNT(*) AS download_count, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank
    FROM SQL_DATA
    GROUP BY package
)
SELECT package, download_count
FROM PackageRank
WHERE rank = 2;

--9.7 Print the name of the package whose download count is bigger than 1000.
SELECT package FROM SQL_DATA
GROUP BY package
HAVING COUNT(*) &gt; 1000;

--another type
SELECT package
FROM SQL_DATA
WHERE size &gt; 1000;

--9.8 The field &quot;r_os&quot; is the operating system of the users.
--Here we would like to know what main system we have (ignore version number), the relevant counts, and the proportion (in percentage).
--Hint: to write a query which can ignore the version number, try this: https://github.com/asg017/sqlite-regex)

WITH OSCounts AS (
    SELECT 
        CASE
            WHEN r_os LIKE 'win%' THEN 'Windows'
            WHEN r_os LIKE 'mac%' THEN 'macOS'
            WHEN r_os LIKE 'linux%' THEN 'Linux'
            ELSE 'Other'
        END AS main_os,
        COUNT(*) AS count
    FROM downloads
    GROUP BY main_os
),
TotalDownloads AS (
    SELECT COUNT(*) AS total
    FROM downloads
)
SELECT 
    OSCounts.main_os, 
    OSCounts.count, 
    (OSCounts.count * 100.0 / TotalDownloads.total) AS percentage
FROM OSCounts, TotalDownloads;









</sql><current_tab id="0"/></tab_sql></sqlb_project>
