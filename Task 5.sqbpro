<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="Task 5.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="860"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Providers" custom_title="0" dock_id="1" table="4,9:mainProviders"/><dock_state state="000000ff00000000fd0000000100000002000004f40000021efc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000004f40000011800ffffff000004f40000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Pieces" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="36"/><column index="2" value="70"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Providers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="39"/><column index="2" value="163"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Provides" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="38"/><column index="2" value="55"/><column index="3" value="36"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">CREATE TABLE Pieces (
 Code INTEGER NOT NULL,
 Name TEXT NOT NULL,
 PRIMARY KEY (Code)
 );
 
CREATE TABLE Providers (
 Code VARCHAR(40) NOT NULL,  
 Name TEXT NOT NULL,
PRIMARY KEY (Code) 
 );
 
CREATE TABLE Provides (
 Piece INTEGER, 
 Provider VARCHAR(40), 
 Price INTEGER NOT NULL,
 PRIMARY KEY(Piece, Provider) 
 );
 
INSERT INTO Providers(Code, Name) VALUES('HAL','Clarke Enterprises');
INSERT INTO Providers(Code, Name) VALUES('RBT','Susan Calvin Corp.');
INSERT INTO Providers(Code, Name) VALUES('TNBC','Skellington Supplies');

INSERT INTO Pieces(Code, Name) VALUES(1,'Sprocket');
INSERT INTO Pieces(Code, Name) VALUES(2,'Screw');
INSERT INTO Pieces(Code, Name) VALUES(3,'Nut');
INSERT INTO Pieces(Code, Name) VALUES(4,'Bolt');

INSERT INTO Provides(Piece, Provider, Price) VALUES(1,'HAL',10);
INSERT INTO Provides(Piece, Provider, Price) VALUES(1,'RBT',15);
INSERT INTO Provides(Piece, Provider, Price) VALUES(2,'HAL',20);
INSERT INTO Provides(Piece, Provider, Price) VALUES(2,'RBT',15);
INSERT INTO Provides(Piece, Provider, Price) VALUES(2,'TNBC',14);
INSERT INTO Provides(Piece, Provider, Price) VALUES(3,'RBT',50);
INSERT INTO Provides(Piece, Provider, Price) VALUES(3,'TNBC',45);
INSERT INTO Provides(Piece, Provider, Price) VALUES(4,'HAL',5);
INSERT INTO Provides(Piece, Provider, Price) VALUES(4,'RBT',7);

-- 5.1 Select the name of all the pieces. 
SELECT Name From Pieces;

-- 5.2  Select all the providers' data. 
SELECT *FROM Providers;

-- 5.3 Obtain the average price of each piece (show only the piece code and the average price).
SELECT Piece, AVG(Price) FROM Provides
GROUP BY Price; 

-- 5.4  Obtain the names of all providers who supply piece 1.
SELECT Providers.Name FROM Providers
JOIN Provides ON Providers.Code = Provides.Provider
WHERE Provides.Piece = 1;

-- 5.5 Select the name of pieces provided by the provider with code &quot;HAL&quot;.
--JOin
SELECT Pieces.Name
FROM Pieces 
JOIN Provides ON Provides.Piece = Pieces.code
WHERE Provides.Provider = 'HAL';


--Subquery
SELECT Pieces.Name
FROM Pieces 
WHERE code IN (
	SELECT Piece
	FROM Provides
	WHERE Provider = &quot;HAL&quot;
	)
--CTE	
WITH HAL_Stock AS
(SELECT Piece
FROM Provides
WHERE Provider = 'HAL')

SELECT Pieces.Name
FROM Pieces
JOIN HAL_Stock
ON Pieces.Code = HAL_Stock.Piece;

-- 5.6 Add an entry to the database to indicate that &quot;Skellington Supplies&quot; (code &quot;TNBC&quot;) will provide sprockets (code &quot;1&quot;) for 15 cents each.
INSERT INTO Provides(Piece, Provider, Price) VALUES(1,'TNBC',15);

-- 5.7 For each piece, find the most expensive offering of that piece and include the piece name, provider name, and price 
--(OPTIONAL: As there could be more than one provider who supply the same piece at the most expensive price, 
-- show all providers who supply at the most expensive price).
SELECT Pieces.Name, Provides.Provider, Provides.Price
FROM Pieces

JOIN Provides ON Pieces.Code = Provides.Piece
WHERE Provides.Price = (SELECT MAX(Price) 
FROM Provides WHERE Piece = Pieces.Code);

-- 5.8 Increase all prices by one cent.
UPDATE Provides
SET Price = Price + 1;

-- 5.9 Update the database to reflect that &quot;Susan Calvin Corp.&quot; (code &quot;RBT&quot;) will not supply bolts (code 4).
DELETE FROM Provides
WHERE Provider = 'RBT' AND Piece = 4;

-- 5.10 Update the database to reflect that &quot;Susan Calvin Corp.&quot; (code &quot;RBT&quot;) will not supply any pieces (the provider should still remain in the database).
DELETE FROM Provides
WHERE Provider = 'RBT';
</sql><current_tab id="0"/></tab_sql></sqlb_project>
